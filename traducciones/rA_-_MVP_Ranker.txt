/* log_athena.conf

// Log MVP Monster Drops (Note 1)
// Outdated. Use Pick_Log instead. But this log could be useful to keep track slayed MVPs
log_mvpdrop: yes

*/


prontera,139,183,7	script	MvP Rank	863,{
	.@cid = getcharid(0);
	query_sql("SELECT COUNT(`kill_char_id`) FROM `"+.database_schema$[0]+"`.`mvplog`",.@t1);
	while (1) {
		switch(select(
			"~ ^009900Mis estadisticas^000000.",
			"~ Ranking global (Top "+.top_rank_global+").",
			"~ Ranking mensual (Top "+.top_rank_monthly+").",
			"~ Ranking semanal (Top "+.top_rank_weekly+").",
			"~ Filtrar por MvP ^ff0000["+.@t1+"]^000000.",
			"~ ^1E90FFInformación y premios^000000.",
			"Salir."
		)) {
			case 1:
				mes "[ ^2e9c99Mis estadisticas^000000 ]";
				query_sql("SELECT COUNT(`mvp_id`) FROM `"+.database_schema$[0]+"`.`mvplog` WHERE `kill_char_id` = "+.@cid+" "+.disabled_map_query$+" GROUP BY `kill_char_id`", .@total_kill);
				mes "MvPs Totales: "+"^ff0000["+F_InsertComma(.@total_kill)+"]^000000";
				query_sql("SELECT `monster_id` FROM `"+.database_schema$[0]+"`.`mvplog` WHERE `kill_char_id` = "+.@cid+" "+.disabled_map_query$+" ORDER BY `mvp_id` DESC LIMIT 1", .@last_mob_id);
				mes "Último MvP: "+getmonsterinfo(.@last_mob_id, MOB_NAME);
				mes " ";
				mes "Historial MvPs:";
				.@size = query_sql("SELECT `monster_id`, COUNT(`mvp_id`) AS `total` FROM `"+.database_schema$[0]+"`.`mvplog` WHERE YEAR(`mvp_date`) = "+.year+" AND `kill_char_id` = "+.@cid+" "+.disabled_map_query$+" GROUP BY `kill_char_id`,`monster_id` ORDER BY `total` DESC", .@mob_id, .@mob_kill);
				if (.@size) {
					for (.@i = 0; .@i < .@size; .@i++)
						mes getmonsterinfo(.@mob_id[.@i], MOB_NAME)+" - " + "^ff0000["+.@mob_kill[.@i]+"]^000000";
				}
				else {
					mes "~ ^FF0000No hay registros^000000.";
				}
				break;
			case 2:
				mes "[ ^2e9c99Top "+.top_rank_global+" Global^000000 ]";
				.@sql$ = "SELECT c.`name`, COUNT(`kill_char_id`) AS `total` FROM `"+.database_schema$[0]+"`.`mvplog` rank INNER JOIN `"+.database_schema$[1]+"`.`char` c ON c.`char_id` = rank.`kill_char_id` WHERE YEAR(rank.`mvp_date`) = "+.year+" "+.disabled_map_query$+" GROUP BY rank.`kill_char_id` ORDER BY `total` DESC LIMIT "+.top_rank_global;
				.@size = query_sql(.@sql$, .@name$, .@total);
				if (.@size) {
					for (.@i = 0; .@i < .@size; .@i++)
						mes "Top "+(.@i+1)+": ^0055FF"+.@name$[.@i]+"^000000 - ^FF0000"+.@total[.@i]+"^000000 MvP(s).";
				}
				else {
					mes "~ ^FF0000No hay registros^000000.";
				}
				break;
			case 3:
				.@month = select(
					"~ Mes actual.",
					"Enero.",
					"Febrero.",
					"Marzo.",
					"Abril.",
					"Mayo.",
					"Junio.",
					"Julio.",
					"Agosto.",
					"Septiembre.",
					"Octubre.",
					"Noviembre.",
					"Diciembre."
				) - 1;
				if (.@month <= 0)
					.@month = .month;
				mes "[ ^2e9c99Top "+.top_rank_monthly+" Mensual - Mes #"+.@month+"^000000 ]";
				.@sql$ = "SELECT c.`name`, COUNT(`kill_char_id`) AS `total` FROM `"+.database_schema$[0]+"`.`mvplog` rank INNER JOIN `"+.database_schema$[1]+"`.`char` c ON c.`char_id` = rank.`kill_char_id` WHERE YEAR(rank.`mvp_date`) = "+.year+" AND MONTH(rank.`mvp_date`) = "+.@month+" "+.disabled_map_query$+" GROUP BY rank.`kill_char_id` ORDER BY `total` DESC LIMIT "+.top_rank_monthly;
				.@size = query_sql(.@sql$, .@name$, .@total);
				if (.@size) {
					for (.@i = 0; .@i < .@size; .@i++)
						mes "Top "+(.@i+1)+": ^0055FF"+.@name$[.@i]+"^000000 - ^FF0000"+.@total[.@i]+"^000000 MvP(s).";
				}
				else {
					mes "~ ^FF0000No hay registros^000000.";
				}
				break;
			case 4:
				mes "[ ^2e9c99Top "+.top_rank_weekly+" Semanal - Semana #"+.week+"^000000 ]";
				.@sql$ = "SELECT c.`name`, COUNT(`kill_char_id`) AS `total` FROM `"+.database_schema$[0]+"`.`mvplog` rank INNER JOIN `"+.database_schema$[1]+"`.`char` c ON c.`char_id` = rank.`kill_char_id` WHERE YEAR(rank.`mvp_date`) = "+.year+" AND WEEKOFYEAR(rank.`mvp_date`) = "+.week+" "+.disabled_map_query$+" GROUP BY rank.`kill_char_id` ORDER BY `total` DESC LIMIT "+.top_rank_weekly;
				.@size = query_sql(.@sql$, .@name$, .@total);
				.@size = query_sql(.@sql$, .@name$, .@total);
				if (.@size) {
					for (.@i = 0; .@i < .@size; .@i++)
						mes "Top "+(.@i+1)+": ^0055FF"+.@name$[.@i]+"^000000 - ^FF0000"+.@total[.@i]+"^000000 MvP(s).";
				}
				else {
					mes "~ ^FF0000No hay registros^000000.";
				}
				break;
			case 5:
				.@mvp_menu$ = "";
				freeloop(true);
				for (.@i = 0; .@i < .mvp_size; .@i++) {
					query_sql("SELECT COUNT(`kill_char_id`) FROM `"+.database_schema$[0]+"`.`mvplog` rank WHERE YEAR(rank.`mvp_date`) = "+.year+" AND `monster_id` = "+.mvp_list[.@i],.@t2);
					.@mvp_menu$ = .@mvp_menu$ + getmonsterinfo(.mvp_list[.@i], MOB_NAME) + " ^ff0000["+.@t2+"]^000000.";
					.@mvp_menu$ += ":";
				}
				freeloop(false);
				.@mvp = select(.@mvp_menu$) - 1;
				mes "[ ^2e9c99MVP - "+getmonsterinfo(.mvp_list[.@mvp], MOB_NAME)+"^000000 ]";
				.@sql$ = "SELECT c.`name`, COUNT(`kill_char_id`) AS `total` FROM `"+.database_schema$[0]+"`.`mvplog` rank INNER JOIN `"+.database_schema$[1]+"`.`char` c ON c.`char_id` = rank.`kill_char_id` WHERE YEAR(rank.`mvp_date`) = "+.year+" AND `monster_id` = "+.mvp_list[.@mvp]+" "+.disabled_map_query$+" GROUP BY rank.`kill_char_id` ORDER BY `total` DESC LIMIT "+.top_rank_global;
				.@size = query_sql(.@sql$, .@name$, .@total);
				if (.@size) {
					for (.@i = 0; .@i < .@size; .@i++)
						mes "Top "+(.@i+1)+": ^0055FF"+.@name$[.@i]+"^000000 - ^FF0000["+.@total[.@i]+"]^000000.";
				}
				else {
					mes "~ ^FF0000No hay registros^000000.";
				}
				break;
			case 6:
				mes "[ ^2e9c99Información^000000 ]";
				mes "¡Hola!";
				mes "Conmigo podrás ver el registro de todos los players que matan ^FF6133MVP(s)^000000 en ^2e9c99Iridium RO^000000.";
				next;
				mes "[ ^2e9c99Información^000000 ]"; 
				mes "Es mi deber mostrar a los jugadores las estadisticas globables, mensuales y semanales.";
				next;	
				mes "[ ^2e9c99Premios^000000 ]";
				mes "Los premios se darán ^800080mensualmente^000000 a los jugadores TOP 3 del Ranking.";
				mes "~ ^FF0000Nota: El Ranking no aplica restricción en ningún mapa^000000.";
				next;
				mes "[ ^2e9c99Premios^000000 ]";
				mes "======== Premios ========";
				mes "^009900Primer lugar^000000: 45,000,000 Zeny + Aun no lo se";
				mes " ";
				mes "^00BFFFSegundo lugar^000000: 30,000,000 Zeny + Aun no lo se";
				mes " ";
				mes "^FF33E6Tercer lugar^000000: 15,000,000 Zeny + Aun no lo se";
				next;
				mes "[ ^2e9c99Premios^000000 ]";
				mes "Cada fin de ^800080mes^000000, los ganadores recibirán sus premios vía RoDEX (Mail).";
				mes "-----------------------------------";
				mes "~ ^777777¡Ánimo y a matar muchos MVP(s)!";
				break;
			default:
				close;
		}
		next;
	}
	close;
	
	OnInit:
		waitingroom "[ MvP Rank ]",0;
		
		// database schema name
		setarray .database_schema$, "rathena_log", "rathena_server";
		
		// top kill rank are listed.
		.top_rank_global = 25;
		.top_rank_monthly = 25;
		.top_rank_weekly = 25;
		
		// top 3 every month are rewarded.
		.top_rank_reward = 3;
		
		// disabled maps
		// setarray .disabled_map$, "06guild_%", "%cas_g%", "%@%", "prontera";
		.disabled_map_size = getarraysize(.disabled_map$);
		for (.@i = 0; .@i < .disabled_map_size; .@i++)
			.disabled_map_query$ += "AND `map` NOT LIKE '"+escape_sql(.disabled_map$[.@i])+"' ";
			
		.mvp_size = query_sql("SELECT `id` FROM `"+.database_schema$[1]+"`.`mob_db` WHERE `mexp` > 0 ORDER BY `kName`", .mvp_list);
		
	OnClock0000:
		// assign rodex reward at 1st of every month.
		if (.day == 1 && .month > 0) {
			.@sql$ = "SELECT rank.`kill_char_id`, COUNT(`kill_char_id`) AS `total` FROM `"+.database_schema$[0]+"`.`mvplog` rank INNER JOIN `"+.database_schema$[1]+"`.`char` c ON c.`char_id` = rank.`kill_char_id` WHERE YEAR(rank.`mvp_date`) = "+.year+" AND MONTH(rank.`mvp_date`) = "+.month+" "+.disabled_map_query$+" GROUP BY rank.`kill_char_id` ORDER BY `total` DESC LIMIT "+.top_rank_reward;
			.@size = query_sql(.@sql$, .@cid, .@total);
			
			for (.@i = 0; .@i < .@size; .@i++) {
				.@rank = .@i+1;
				switch (.@rank) {
					case 1: // Top Rank 1 reward
						.@zeny = 5000000;
						setarray .@itemid, 501, 502, 503;
						setarray .@amount, 100, 100, 100;
						debugmes ""+.@rank;
						break;
					case 2: // Top Rank 2 reward
						.@zeny = 500000;
						setarray .@itemid, 501, 502, 503;
						setarray .@amount, 10, 10, 10;
						debugmes ""+.@rank;
						break;
					case 3: // Top Rank 3 reward
						.@zeny = 5000;
						setarray .@itemid, 501, 502, 503;
						setarray .@amount, 1, 1, 1;
						debugmes ""+.@rank+" - "+.@cid[.@i];
						break;
					default: continue;
				}
				mail .@cid[.@i], "SYSTEM", "**TOP #"+.@rank+" MVP RANK (MONTHLY) **", "Congratulation! You are rewarded for being Top #"+.@rank+" in the Monthly MVP Rank.", .@zeny, .@itemid, .@amount;
			}
		}
		// update date info
		query_sql("SELECT DAYOFMONTH(NOW()), MONTH(NOW()), YEAR(NOW()), WEEKOFYEAR(NOW())", .day, .month, .year, .week);
		end;
}